# --- Top Level ---
# Gera uma chamada de função Python com uma lista de dicionários como argumento.
<ann> ::= 'build_model([' <input-layer-py> ',' <hidden-layers-py> ',' <output-layer-py> '])'

# --- Input Layer (como Dicionário Python) ---
<input-layer-py> ::= "{'type':'input'," <features-py> "," <seq-length-py> "}"

# --- Output Layer (como Dicionário Python) ---
<output-layer-py> ::= "{'type':'output'," <units-py> "," <activation-py> <opt-dropout-py> "}"

# --- Layer Definitions (com Vírgulas para listas) ---
<hidden-layers-py> ::= <final-layer-py> | <stackable-layer-py> ',' <hidden-layers-py>

# Camadas que podem ser empilhadas
<stackable-layer-py> ::= <stackable-lstm-layer-py> | <stackable-gru-layer-py> | <conv1d-layer-py> | <dense-layer-py> | <normalization-layer-py> | <pooling-layer-py>

# Camadas que devem estar no final da pilha
<final-layer-py> ::= <dense-layer-py> | <final-lstm-layer-py> | <final-gru-layer-py> | <conv1d-layer-py> | <tcn-layer-py> | <attention-layer-py> | <esn-layer-py>

# --- Layer Implementations (como Dicionários Python) ---
<dense-layer-py> ::= "{'type':'dense'," <units-py> "," <activation-py> <opt-dropout-py> <opt-regularization-py> <opt-weight-init-py> "}"
<stackable-lstm-layer-py> ::= "{'type':'lstm'," <units-py> "," <activation-py> "," <return-seq-on-py> "," <recurrent-dropout-py> <opt-dropout-py> <opt-regularization-py> "}"
<final-lstm-layer-py> ::= "{'type':'lstm'," <units-py> "," <activation-py> "," <return-seq-off-py> "," <recurrent-dropout-py> <opt-dropout-py> <opt-regularization-py> "}"
<stackable-gru-layer-py> ::= "{'type':'gru'," <units-py> "," <activation-py> "," <return-seq-on-py> "," <recurrent-dropout-py> <opt-dropout-py> <opt-regularization-py> "}"
<final-gru-layer-py> ::= "{'type':'gru'," <units-py> "," <activation-py> "," <return-seq-off-py> "," <recurrent-dropout-py> <opt-dropout-py> <opt-regularization-py> "}"
<conv1d-layer-py> ::= "{'type':'conv1d'," <filters-py> "," <kernel-size-py> "," <strides-py> "," <padding-py> "," <dilation-rate-py> "," <activation-py> <opt-dropout-py> "}"
<tcn-layer-py> ::= "{'type':'tcn'," <filters-py> "," <kernel-size-py> "," <dilations-py> "," <activation-py> <opt-dropout-py> "}"
<attention-layer-py> ::= "{'type':'attention'," <units-py> "," <heads-py> <opt-dropout-py> "}"
<esn-layer-py> ::= "{'type':'esn'," <units-py> "," <activation-py> "," <leak-rate-py> "," <spectral-radius-py> "," <input-scaling-py> "}"

<pooling-layer-py> ::= <max-pooling-py> | <avg-pooling-py> | <global-pooling-py>
<max-pooling-py> ::= "{'type':'maxpool1d'," <pool-size-py> "," <strides-py> "}"
<avg-pooling-py> ::= "{'type':'avgpool1d'," <pool-size-py> "," <strides-py> "}"
<global-pooling-py> ::= "{'type':'globalpool'," <pool-type-py> "}"

<normalization-layer-py> ::= <batch-norm-py> | <layer-norm-py> | <instance-norm-py>
<batch-norm-py> ::= "{'type':'batchnorm'," <axis-py> "," <momentum-py> "}"
<layer-norm-py> ::= "{'type':'layernorm'," <axis-py> "," <epsilon-py> "}"
<instance-norm-py> ::= "{'type':'instancenorm'," <axis-py> "}"

# --- Hyperparameters (como pares chave-valor de Dicionário Python) ---
<units-py> ::= "'units':" <units-val>
<filters-py> ::= "'filters':" <filter-val>
<features-py> ::= "'features':" <whole-number>
<heads-py> ::= "'heads':" <heads-val>
<seq-length-py> ::= "'sequence_length':" <whole-number>
<recurrent-dropout-py> ::= "'recurrent_dropout':" <float>
<return-seq-on-py> ::= "'return_sequences':True"
<return-seq-off-py> ::= "'return_sequences':False"
<kernel-size-py> ::= "'kernel_size':" <kernel-size-val>
<strides-py> ::= "'strides':" <whole-number>
<padding-py> ::= "'padding':'" <padding-val> "'"
<padding-val> ::= 'causal' | 'same' | 'valid'
<leak-rate-py> ::= "'leak_rate':" <float>
<spectral-radius-py> ::= "'spectral_radius':" <float>
<input-scaling-py> ::= "'input_scaling':" <float>
<dilations-py> ::= "'dilations':" <dilation-list>
<pool-size-py> ::= "'pool_size':" <pool-size-val>
<pool-type-py> ::= "'type':'" <pool-type-val> "'"
<pool-type-val> ::= 'max' | 'avg'
<activation-py> ::= "'activation':'" <activation-fn> "'"

# Parâmetros opcionais agora incluem uma vírgula inicial
<opt-dropout-py> ::= ",'dropout':" <float> | ""
<opt-regularization-py> ::= "," <regularization-py> | ""
<regularization-py> ::= <l1-py> | <l2-py> | <l1-py> "," <l2-py>
<l1-py> ::= "'l1':" <float>
<l2-py> ::= "'l2':" <float>

<opt-weight-init-py> ::= ",'kernel_initializer':'" <weight-init-val> "'" | ""
<weight-init-val> ::= 'glorot_uniform' | 'glorot_normal' | 'he_uniform' | 'he_normal' | 'random_normal'

<dilation-rate-py> ::= "'dilation_rate':" <whole-number>
<axis-py> ::= "'axis':" <whole-number>
<momentum-py> ::= "'momentum':" <float>
<epsilon-py> ::= "'epsilon':" <float>

# --- Definições que não precisam de alteração ---
<dilation-list> ::= '[' <dilation-list-content> ']'
<dilation-list-content> ::= <whole-number> | <whole-number> ',' <dilation-list-content>
<activation-fn> ::= 'linear' | 'relu' | 'sigmoid' | 'tanh' | 'softmax' | 'swish' | 'gelu' | 'leaky_relu' | 'elu'
<heads-val> ::= '1' | '2' | '4' | '8'
<units-val> ::= '4' | '8' | '16' | '32' | '64' | '128' | '256' | '512' | '1024'
<filter-val> ::= '16' | '32' | '64' | '128' | '256'
<kernel-size-val> ::= '3' | '5' | '7' | '9' | '11'
<pool-size-val> ::= '2' | '3' | '4'
<whole-number> ::= '0' | <non-zero-digit> <digits>
<non-zero-digit> ::= '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
<digits> ::= <digit> | <digit> <digits>
<digit> ::= '0' | <non-zero-digit>
<float> ::= <whole-number> '.' <digits> | '0.' <digits>